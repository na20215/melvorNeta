{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nimport _imports_0 from '../../../assets/main/mastery_header.svg';\nimport _imports_1 from '../../../assets/woodcutting/woodcutting.svg';\nconst _hoisted_1 = {\n  class: \"maintain\"\n};\nconst _hoisted_2 = {\n  class: \"trees\"\n};\nconst _hoisted_3 = [\"tree-data\"];\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  style: {\n    fontSize: '0.9rem'\n  }\n};\nconst _hoisted_6 = {\n  style: {\n    fontSize: '0.7rem'\n  }\n};\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = {\n  class: \"mastery_part\"\n};\nconst _hoisted_9 = {\n  class: \"iconPart\"\n};\nconst _hoisted_10 = {\n  class: \"mastery_exp_info\"\n};\nconst _hoisted_11 = {\n  class: \"masteryExp\"\n};\nconst _hoisted_12 = {\n  class: \"requiredInfo\",\n  style: {\n    fontSize: '0.8rem'\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_basic_exp_bar = _resolveComponent(\"basic-exp-bar\");\n  const _component_cutting_block = _resolveComponent(\"cutting-block\");\n  const _component_basic_block = _resolveComponent(\"basic-block\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.treesData, tree => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"helperSturcture\",\n      key: tree.name,\n      \"tree-data\": tree\n    }, [$setup.skillInfo.level >= tree.unlockLevel ? (_openBlock(), _createBlock(_component_cutting_block, {\n      key: 0\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", {\n        class: \"treesContent\",\n        onClick: $event => $options.switchActiveState(tree)\n      }, [_cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n        style: {\n          fontSize: '0.7rem'\n        }\n      }, \"砍伐\", -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_5, _toDisplayString(tree.name), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_6, _toDisplayString(tree.exp) + \" 技能经验值/\" + _toDisplayString(tree.cutTime) + \"秒\", 1 /* TEXT */), _createElementVNode(\"span\", null, [_createElementVNode(\"img\", {\n        src: tree.icon\n      }, null, 8 /* PROPS */, _hoisted_7)]), _createVNode(_component_basic_exp_bar, {\n        \"bar-width\": '90%',\n        \"bar-height\": '1.5rem',\n        \"initial-pos\": tree.isActive ? '100%' : '0',\n        \"color-of-bar\": 'rgb(53,143,18)'\n      }, null, 8 /* PROPS */, [\"initial-pos\"]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_cache[0] || (_cache[0] = _createElementVNode(\"img\", {\n        src: _imports_0\n      }, null, -1 /* HOISTED */)), _createElementVNode(\"span\", null, _toDisplayString(tree.masteryLevel), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"span\", _hoisted_11, _toDisplayString(tree.masteryExp) + \"/\" + _toDisplayString(_ctx.levelList[tree.masteryLevel]), 1 /* TEXT */), _createVNode(_component_basic_exp_bar, {\n        \"bar-width\": '100%',\n        \"initial-pos\": '0%'\n      })])])], 8 /* PROPS */, _hoisted_4)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */)) : (_openBlock(), _createBlock(_component_basic_block, {\n      key: 1,\n      \"block-width\": '100%',\n      \"side-color\": 'rgb(229,103,103)',\n      \"inner-height\": '98%',\n      \"block-height\": '264.09px'\n    }, {\n      default: _withCtx(() => [_cache[2] || (_cache[2] = _createElementVNode(\"span\", {\n        style: {\n          fontSize: '0.9rem'\n        }\n      }, \"锁定\", -1 /* HOISTED */)), _cache[3] || (_cache[3] = _createElementVNode(\"img\", {\n        class: \"lockedTree\",\n        src: _imports_1\n      }, null, -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_12, \"等级 \" + _toDisplayString(tree.unlockLevel), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */))], 8 /* PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_imports_0","_imports_1","class","style","fontSize","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","treesData","tree","key","name","$setup","skillInfo","level","unlockLevel","_createBlock","_component_cutting_block","default","_withCtx","onClick","$event","$options","switchActiveState","_hoisted_5","_toDisplayString","_hoisted_6","exp","cutTime","src","icon","_hoisted_7","_createVNode","_component_basic_exp_bar","isActive","_hoisted_8","_hoisted_9","masteryLevel","_hoisted_10","_hoisted_11","masteryExp","_ctx","levelList","_hoisted_4","_","_component_basic_block","_hoisted_12","_hoisted_3"],"sources":["C:\\Users\\10433\\Downloads\\vues\\vue-cli-01-a-new-vue-project\\src\\components\\layout\\skills\\skillCutting.vue"],"sourcesContent":["<template>\r\n    <div class=\"maintain\">\r\n\r\n    <div class=\"trees\">\r\n        <div class=\"helperSturcture\"\r\n            v-for=\"tree in treesData\"\r\n            :key=\"tree.name\"\r\n            :tree-data=\"tree\">\r\n        <cutting-block v-if=\"skillInfo.level >= tree.unlockLevel\">   \r\n                <div class=\"treesContent\" @click=\"switchActiveState(tree)\">\r\n                    <span :style=\"{fontSize:'0.7rem'}\">砍伐</span>\r\n                    <span :style=\"{fontSize:'0.9rem'}\">{{ tree.name }}</span>\r\n                    <span :style=\"{fontSize:'0.7rem'}\">{{ tree.exp }} 技能经验值/{{ tree.cutTime }}秒</span>\r\n                    <span><img :src=\"tree.icon\"></span>\r\n                    <basic-exp-bar\r\n                    :bar-width=\"'90%'\"\r\n                    :bar-height=\"'1.5rem'\"\r\n                    :initial-pos=\"tree.isActive ? '100%' :'0'\"\r\n                    :color-of-bar=\"'rgb(53,143,18)'\"\r\n                    ></basic-exp-bar>\r\n                    <div class=\"mastery_part\">\r\n                        <div class=\"iconPart\">\r\n                            <img src=\"../../../assets/main/mastery_header.svg\">\r\n                            <span>{{ tree.masteryLevel }}</span>\r\n                        </div>\r\n                        <div class=\"mastery_exp_info\">\r\n                            <span class=\"masteryExp\">{{ tree.masteryExp}}/{{ levelList[tree.masteryLevel] }}</span>\r\n                            <basic-exp-bar\r\n                                :bar-width=\"'100%'\"\r\n                                :initial-pos=\"'0%'\"\r\n                            ></basic-exp-bar>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </cutting-block>\r\n        <basic-block v-else\r\n        :block-width=\"'100%'\"\r\n        :side-color=\"'rgb(229,103,103)'\"\r\n        :inner-height=\"'98%'\"\r\n        :block-height=\"'264.09px'\">\r\n            <span :style=\"{fontSize:'0.9rem'}\">锁定</span>\r\n            <img class=\"lockedTree\" src=\"../../../assets/woodcutting/woodcutting.svg\">\r\n            <span  class=\"requiredInfo\" :style=\"{fontSize:'0.8rem'}\">等级 {{ tree.unlockLevel }}</span>\r\n        </basic-block>\r\n        </div>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport BasicInfoBlock from '../basicInfoBlock.vue';\r\nimport cuttingBlock from './cuttingBlock.vue'\r\nimport BasicBlock from '../basicBlock.vue';\r\nimport { useWarehouseStore } from '../../../stores/warehouse.js';\r\nimport { useSkillStore } from '../../../stores/expPark.js'\r\nimport { treesData } from '../../../data/skillCutting.js';\r\nimport { levelList } from '../../../data/levelList.js';\r\n\r\nexport default {\r\n  components: { cuttingBlock, BasicInfoBlock, BasicBlock },\r\n    setup() {\r\n        const WarehouseStore = useWarehouseStore();\r\n        const SkillStore = useSkillStore();\r\n        const skillInfo = SkillStore.skills['伐木'];\r\n        const getMasteryExp = SkillStore.getMasteryExp;\r\n        const addItem = WarehouseStore.addItem;\r\n        const addExp = SkillStore.addExp;\r\n        const addMasteryPool = SkillStore.addMasteryPoolExp;\r\n        return{\r\n            getMasteryExp,\r\n            addItem,\r\n            addExp,\r\n            addMasteryPool,\r\n            skillInfo\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            isActived:[],\r\n            isAnimating: false,\r\n            timer:null,\r\n            DoubleCutting: false,\r\n            treesData: treesData,\r\n        }\r\n    },\r\n    methods: {\r\n        switchActiveState(tree){\r\n            if(this.isActived.length < (this.DoubleCutting? 2 : 1) && tree.isActive === false){\r\n                tree.isActive = true;\r\n                \r\n                this.isActived.push({count:1, ...tree});\r\n                return\r\n            }\r\n            if(this.isActived.some(item => item.name === tree.name) && tree.isActive === true){\r\n                tree.isActive = false;\r\n                const index = this.isActived.findIndex(item => item.name === tree.name);\r\n                this.isActived.splice(index,1);\r\n                if(this.isActived.length === 1){\r\n                    this.isActived[0] = {count:1, ...Object.values(this.treesData).find(item => item.name === this.isActived[0].name)};\r\n                }\r\n                return\r\n            }\r\n        },\r\n        setTheShorterTreeData(shorterTree, longerTreeCutTime,coefficient){\r\n            shorterTree.cutTime = longerTreeCutTime;\r\n            shorterTree.exp = Math.round(shorterTree.exp * coefficient);\r\n            shorterTree.count = Math.round(shorterTree.count * coefficient);\r\n        },\r\n        addMasteryExp(treeName){\r\n            const targetTree = treesData[treeName];\r\n            const addExpValue = this.getMasteryExp(targetTree.masteryLevel,treesData.length,targetTree.cutTime);\r\n            targetTree.masteryExp += addExpValue;\r\n            if(targetTree.masteryExp >= levelList[targetTree.masteryLevel]){\r\n                targetTree.masteryLevel++;\r\n            }\r\n            return addExpValue;\r\n        }\r\n    },\r\n    computed: {\r\n        isActivedLength(){\r\n            return this.isActived.length;\r\n        },\r\n        Duration(){\r\n            console.log(`duration: ${this.isActived[0]?.cutTime}`)\r\n            return this.isActived[0]?.cutTime;\r\n        }\r\n    },\r\n    watch:{\r\n        isActivedLength(newValue){\r\n                    if (this.timer) {\r\n                        clearInterval(this.timer);\r\n                        this.isAnimating = false;\r\n                        console.log('clear timer')\r\n                        this.timer = null;\r\n                    }\r\n                    if (newValue === 0) return console.log('clear timer');\r\n                    if (newValue === 1) {\r\n                        console.log('set timer')\r\n                        setTimeout(() => {\r\n                        this.isAnimating = true;\r\n                        }, 0)\r\n\r\n                        this.timer = setInterval(() =>{    \r\n                            this.addItem(this.isActived[0].reward, 1);\r\n                            this.addExp('伐木',this.isActived[0].exp);\r\n                            const MasterExp = this.addMasteryExp(this.isActived[0].name);\r\n                            this.addMasteryPool('伐木',MasterExp/4)\r\n                        }, this.isActived[0].cutTime * 1000)\r\n                    }\r\n                    if (newValue === 2) {\r\n                        const [tree1,tree2] = this.isActived;\r\n                        const shorterTree = tree1.cutTime < tree2.cutTime ? tree1 : tree2;\r\n                        const longerTree = tree1.cutTime > tree2.cutTime ? tree1 : tree2;\r\n                        const coefficient = longerTree.cutTime/shorterTree.cutTime;\r\n                        this.setTheShorterTreeData(shorterTree, longerTree.cutTime, coefficient); \r\n                        setTimeout(() => {\r\n                        this.isAnimating = true;\r\n                        }, 0)\r\n                        this.timer = setInterval(() =>{\r\n                            this.addItem(shorterTree.reward, shorterTree.count);\r\n                            this.addExp('伐木',shorterTree.exp);\r\n                            const shorterTreeMasteryExp = this.addMasteryExp(shorterTree.name);\r\n                            this.addMasteryPool('伐木',shorterTreeMasteryExp/4)\r\n                            this.addItem(longerTree.reward, longerTree.count);\r\n                            this.addExp('伐木',longerTree.exp);\r\n                            const longerTreeMasteryExp =this.addMasteryExp(longerTree.name);\r\n                            this.addMasteryPool('伐木',longerTreeMasteryExp/4)\r\n                        }, this.isActived[0].cutTime * 1000)\r\n                    }    \r\n            },\r\n    }\r\n    \r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.maintain{\r\n    display: flex;\r\n    flex-direction: column;\r\n    box-sizing: border-box;\r\n}\r\n.cuttingAction{\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 20%;\r\n  gap: 2rem; \r\n  padding: 2rem;\r\n  box-sizing: border-box;\r\n}\r\n.detail{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n    box-sizing: border-box;\r\n    gap: 2rem;\r\n}\r\n.outerEdge{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.expPart{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    box-sizing: border-box;\r\n    padding: 0 1rem;\r\n    gap: 1rem;\r\n}\r\n.masteryPart{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    box-sizing: border-box;\r\n    padding: 0 1rem;\r\n    gap: 1rem;\r\n}\r\n.action{\r\n    height: 2rem;\r\n    width: 2rem;\r\n}\r\n.trees{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n    gap: 2rem;\r\n    width: 100%;\r\n    padding: 2rem;\r\n    box-sizing: border-box;\r\n}\r\n.helperSturcture{\r\n    display: flex;\r\n    width: 23%;\r\n}\r\n.treesContent{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding-top: 2rem;\r\n    padding-bottom: 1rem;\r\n    box-sizing: border-box;\r\n}\r\n.treesContent > span{\r\n    margin: 0.2rem;\r\n    font:bolder;\r\n}\r\n.mastery_part{\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content: center;  \r\n    align-items: center;\r\n    align-content: center;\r\n    justify-items: center;\r\n    text-align: center;\r\n    margin-top:1rem;\r\n}\r\n.iconPart{\r\n   display: flex;\r\n   flex-direction: row;\r\n   gap:0.2rem;\r\n   margin: 0.3rem;\r\n}\r\n.mastery_part > .iconPart > img{\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n    \r\n}\r\n.mastery_part > .mastery_exp_info{\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 60%;\r\n    justify-content: center;  \r\n    align-items: center;\r\n    padding:0px;\r\n}\r\n.masteryExp{\r\n    font-size:0.75rem;\r\n    margin-bottom:0.4rem;\r\n}\r\nimg{\r\n    height:4rem;\r\n    width: 4rem;\r\n}\r\n\r\n.lockedTree{\r\n    margin: 1rem;\r\n}\r\n\r\n.requiredInfo{\r\n    background-color: rgb(229,103,103);\r\n    line-height: 1rem;\r\n    width: 80%;\r\n    text-align: center;\r\n    border-radius: 0.5rem;\r\n}\r\n.header :deep(.inner_block){\r\n    padding-top:2rem;\r\n    padding-bottom: 2rem;\r\n    gap: 2rem; \r\n    box-sizing: border-box;\r\n}\r\n\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}