{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport { itemList } from '../data/itemList';\nexport const useWarehouseStore = defineStore('warehouse', {\n  state: () => ({\n    capacity: 20,\n    coin: 0,\n    slayerCoin: 0,\n    items: new Map(),\n    notifications: []\n  }),\n  actions: {\n    isWarehouseFull() {\n      return this.items.size >= this.capacity;\n    },\n    // 显示通知\n    addNotification(itemName, imageUrl, addCount, itemQuantity) {\n      const existingNotification = this.notifications.find(notification => notification.itemName === itemName);\n      if (existingNotification) {\n        clearTimeout(existingNotification.timer);\n        existingNotification.addCount += addCount;\n        existingNotification.itemQuantity = itemQuantity;\n        existingNotification.timer = setTimeout(() => {\n          this.removeNotification(existingNotification.id);\n          console.log(`remove new El: ${this.notifications}`);\n        }, 2000);\n        return;\n      } else {\n        const notification = {\n          itemName,\n          imageUrl,\n          addCount,\n          itemQuantity,\n          id: Date.now(),\n          timer: null\n        };\n        this.notifications.push(notification);\n        console.log(`add new El: ${this.notifications}`);\n        notification.timer = setTimeout(() => {\n          this.removeNotification(notification.id);\n          console.log(`remove new El: ${this.notifications}`);\n        }, 2000);\n      }\n    },\n    removeNotification(id) {\n      const index = this.notifications.findIndex(notification => notification.id === id);\n      if (index !== -1) {\n        this.notifications.splice(index, 1);\n      }\n    },\n    checkProbability(probability) {\n      const randomValue = Math.random();\n      return randomValue <= probability;\n    },\n    addItem(itemId, count) {\n      const itemDetails = itemList[itemId];\n      if (!itemDetails) {\n        console.error('Item not found in item list:', itemId);\n        return;\n      }\n      if (this.isWarehouseFull() && !this.items.has(itemId)) {\n        console.log('Warehouse is full. Cannot add new item type.');\n        return;\n      }\n      const currentItem = this.items.get(itemId);\n      if (currentItem) {\n        currentItem.quantity += count;\n      } else {\n        const newItem = {\n          quantity: 0,\n          ...itemDetails\n        };\n        newItem.quantity += count;\n        this.items.set(itemId, newItem);\n      }\n\n      // 调用显示通知\n      this.addNotification(itemDetails.name, itemDetails.imageUrl, count, this.items.get(itemId).quantity);\n    },\n    addAction(rewards) {\n      Object.keys(rewards).forEach(itemId => {\n        const item = rewards[itemId];\n        if (this.checkProbability(item.probability)) {\n          this.addItem(item.name, item.count);\n        }\n      });\n    },\n    // 消耗物品\n    costItem(itemId, count) {\n      const targetItem = this.items.get(itemId);\n      if (targetItem.count < count) {\n        console.log(`Action failed, the number of ${targetItem.name} is not enough`);\n        return;\n      }\n      targetItem.count -= count;\n      if (targetItem.count === 0) {\n        this.items.delete(itemId);\n      }\n    },\n    // 获取物品数量\n    getItemNumber(itemId) {\n      const thisItem = this.items.get(itemId);\n      return thisItem ? thisItem.count : 0;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","itemList","useWarehouseStore","state","capacity","coin","slayerCoin","items","Map","notifications","actions","isWarehouseFull","size","addNotification","itemName","imageUrl","addCount","itemQuantity","existingNotification","find","notification","clearTimeout","timer","setTimeout","removeNotification","id","console","log","Date","now","push","index","findIndex","splice","checkProbability","probability","randomValue","Math","random","addItem","itemId","count","itemDetails","error","has","currentItem","get","quantity","newItem","set","name","addAction","rewards","Object","keys","forEach","item","costItem","targetItem","delete","getItemNumber","thisItem"],"sources":["C:/Users/10433/Downloads/vues/vue-cli-01-a-new-vue-project/src/stores/warehouse.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport { itemList } from '../data/itemList';\r\n\r\nexport const useWarehouseStore = defineStore('warehouse', {\r\n  state: () => ({\r\n    capacity: 20,\r\n    coin: 0,\r\n    slayerCoin: 0,\r\n    items: new Map(),\r\n    notifications: [],\r\n  }),\r\n\r\n  actions: {\r\n    isWarehouseFull() {\r\n      return this.items.size >= this.capacity;\r\n    },\r\n\r\n    // 显示通知\r\n    addNotification(itemName, imageUrl, addCount, itemQuantity) {\r\n      const existingNotification = this.notifications.find(notification => notification.itemName === itemName);\r\n      if(existingNotification){\r\n        clearTimeout(existingNotification.timer);\r\n        existingNotification.addCount += addCount;\r\n        existingNotification.itemQuantity = itemQuantity;\r\n        existingNotification.timer = setTimeout(() => {\r\n          this.removeNotification(existingNotification.id);\r\n          console.log(`remove new El: ${this.notifications}`)\r\n        }, 2000);\r\n        return;\r\n      }else{\r\n        const notification = {\r\n          itemName,\r\n          imageUrl,\r\n          addCount,\r\n          itemQuantity,\r\n          id: Date.now(),\r\n          timer: null,\r\n        };\r\n        this.notifications.push(notification);\r\n        console.log(`add new El: ${this.notifications}`)\r\n        notification.timer = setTimeout(() => {\r\n          this.removeNotification(notification.id);\r\n          console.log(`remove new El: ${this.notifications}`)\r\n        }, 2000);\r\n      }  \r\n    },\r\n\r\n    removeNotification(id) {\r\n      const index = this.notifications.findIndex(notification => notification.id === id);\r\n      if (index !== -1) {\r\n        this.notifications.splice(index, 1);\r\n      }\r\n    },\r\n\r\n    checkProbability(probability) {\r\n      const randomValue = Math.random();\r\n      return randomValue <= probability;\r\n    },\r\n    \r\n    addItem(itemId, count) {\r\n      const itemDetails = itemList[itemId];\r\n      if (!itemDetails) {\r\n        console.error('Item not found in item list:', itemId);\r\n        return;\r\n      }\r\n\r\n      if (this.isWarehouseFull() && !this.items.has(itemId)) {\r\n        console.log('Warehouse is full. Cannot add new item type.');\r\n        return;\r\n      }\r\n\r\n      const currentItem = this.items.get(itemId);\r\n      if (currentItem) {\r\n        currentItem.quantity += count;\r\n      } else {\r\n        const newItem = { quantity: 0, ...itemDetails};\r\n        newItem.quantity += count;\r\n        this.items.set(itemId, newItem);\r\n      }\r\n\r\n      // 调用显示通知\r\n      this.addNotification(itemDetails.name, itemDetails.imageUrl, count, this.items.get(itemId).quantity);\r\n    },\r\n\r\n    addAction(rewards){\r\n      Object.keys(rewards).forEach(itemId => {\r\n        const item = rewards[itemId];\r\n        if(this.checkProbability(item.probability)){\r\n          this.addItem(item.name,item.count);\r\n        }\r\n      })\r\n    },\r\n\r\n    // 消耗物品\r\n    costItem(itemId, count) {\r\n      const targetItem = this.items.get(itemId);\r\n      if (targetItem.count < count) {\r\n        console.log(`Action failed, the number of ${targetItem.name} is not enough`);\r\n        return;\r\n      }\r\n      targetItem.count -= count;\r\n      if (targetItem.count === 0) {\r\n        this.items.delete(itemId);\r\n      }\r\n    },\r\n\r\n    // 获取物品数量\r\n    getItemNumber(itemId) {\r\n      const thisItem = this.items.get(itemId);\r\n      return thisItem ? thisItem.count : 0;\r\n    },\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}