{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport BasicInfoBlock from '../basicInfoBlock.vue';\nimport cuttingBlock from './cuttingBlock.vue';\nimport BasicBlock from '../basicBlock.vue';\nimport { useWarehouseStore } from '../../../stores/warehouse.js';\nimport { useSkillStore } from '../../../stores/expPark.js';\nimport { treesData } from '../../../data/skillCutting.js';\nimport { levelList } from '../../../data/levelList.js';\nexport default {\n  components: {\n    cuttingBlock,\n    BasicInfoBlock,\n    BasicBlock\n  },\n  setup() {\n    const WarehouseStore = useWarehouseStore();\n    const SkillStore = useSkillStore();\n    const skillInfo = SkillStore.skills['伐木'];\n    const getMasteryExp = SkillStore.getMasteryExp;\n    const getMaxExp = SkillStore.getMaxExp;\n    const addItem = WarehouseStore.addItem;\n    const addExp = SkillStore.addExp;\n    const addMasteryPool = SkillStore.addMasteryPoolExp;\n    return {\n      getMasteryExp,\n      getMaxExp,\n      addItem,\n      addExp,\n      addMasteryPool,\n      skillInfo\n    };\n  },\n  data() {\n    return {\n      isActived: [],\n      isAnimating: false,\n      timer: null,\n      DoubleCutting: false,\n      treesData: treesData\n    };\n  },\n  methods: {\n    switchActiveState(tree) {\n      if (this.isActived.length < (this.DoubleCutting ? 2 : 1) && tree.isActive === false) {\n        tree.isActive = true;\n        this.isActived.push({\n          count: 1,\n          masteryGain: Math.round(this.getMasteryExp(tree.masteryLevel, Object.keys(treesData).length, tree.cutTime)),\n          masteryPool: Math.ceil(this.getMasteryExp(tree.masteryLevel, Object.keys(treesData).length, tree.cutTime) / 4),\n          ...tree\n        });\n        return;\n      }\n      if (this.isActived.some(item => item.name === tree.name) && tree.isActive === true) {\n        tree.isActive = false;\n        const index = this.isActived.findIndex(item => item.name === tree.name);\n        this.isActived.splice(index, 1);\n        if (this.isActived.length === 1) {\n          this.isActived[0] = {\n            count: 1,\n            masteryGain: Math.round(this.getMasteryExp(tree.masteryLevel, Object.keys(treesData).length, tree.cutTime)),\n            masteryPool: Math.ceil(this.getMasteryExp(tree.masteryLevel, Object.keys(treesData).length, tree.cutTime) / 4),\n            ...Object.values(this.treesData).find(item => item.name === this.isActived[0].name)\n          };\n        }\n        return;\n      }\n    },\n    setTheShorterTreeData(shorterTree, longerTreeCutTime, coefficient) {\n      shorterTree.cutTime = longerTreeCutTime;\n      shorterTree.exp = Math.round(shorterTree.exp * coefficient);\n      shorterTree.masteryGain = Math.round(shorterTree.masteryGain * coefficient);\n      shorterTree.masteryPool = Math.ceil(shorterTree.masteryPool * coefficient);\n      shorterTree.count = Math.round(shorterTree.count * coefficient);\n    },\n    addMasteryExp(treeName) {\n      const targetTree = this.treesData[treeName];\n      // console.log(` 看看输出了啥${addExpValue}`)\n      const addExpValue = this.isActived.find(item => item.name === treeName).masteryGain;\n      targetTree.masteryExp += Math.round(addExpValue);\n      if (targetTree.masteryExp >= levelList[targetTree.masteryLevel]) {\n        targetTree.masteryLevel++;\n      }\n    }\n  },\n  computed: {\n    isActivedLength() {\n      return this.isActived.length;\n    },\n    Duration() {\n      return this.isActived[0]?.cutTime;\n    }\n  },\n  watch: {\n    isActivedLength(newValue) {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.isAnimating = false;\n        console.log('clear timer');\n        this.timer = null;\n      }\n      if (newValue === 0) return console.log('clear timer');\n      if (newValue === 1) {\n        console.log('set timer');\n        setTimeout(() => {\n          this.isAnimating = true;\n        }, 0);\n        this.timer = setInterval(() => {\n          this.addItem(this.isActived[0].reward, 1);\n          this.addExp('伐木', this.isActived[0].exp);\n          this.addMasteryExp(this.isActived[0].name);\n          this.addMasteryPool('伐木', this.isActived[0].masteryPool);\n        }, this.isActived[0].cutTime * 1000);\n      }\n      if (newValue === 2) {\n        const [tree1, tree2] = this.isActived;\n        const shorterTree = tree1.cutTime < tree2.cutTime ? tree1 : tree2;\n        const longerTree = tree1.cutTime > tree2.cutTime ? tree1 : tree2;\n        const coefficient = longerTree.cutTime / shorterTree.cutTime;\n        this.setTheShorterTreeData(shorterTree, longerTree.cutTime, coefficient);\n        setTimeout(() => {\n          this.isAnimating = true;\n        }, 0);\n        this.timer = setInterval(() => {\n          this.addItem(shorterTree.reward, shorterTree.count);\n          this.addExp('伐木', shorterTree.exp);\n          this.addMasteryExp(shorterTree.masteryGain);\n          this.addMasteryPool('伐木', shorterTree.masteryPool);\n          this.addItem(longerTree.reward, longerTree.count);\n          this.addExp('伐木', longerTree.exp);\n          this.addMasteryExp(longerTree.masteryGain);\n          this.addMasteryPool('伐木', longerTree.masteryPool);\n        }, this.isActived[0].cutTime * 1000);\n      }\n    }\n  }\n};","map":{"version":3,"names":["BasicInfoBlock","cuttingBlock","BasicBlock","useWarehouseStore","useSkillStore","treesData","levelList","components","setup","WarehouseStore","SkillStore","skillInfo","skills","getMasteryExp","getMaxExp","addItem","addExp","addMasteryPool","addMasteryPoolExp","data","isActived","isAnimating","timer","DoubleCutting","methods","switchActiveState","tree","length","isActive","push","count","masteryGain","Math","round","masteryLevel","Object","keys","cutTime","masteryPool","ceil","some","item","name","index","findIndex","splice","values","find","setTheShorterTreeData","shorterTree","longerTreeCutTime","coefficient","exp","addMasteryExp","treeName","targetTree","addExpValue","masteryExp","computed","isActivedLength","Duration","watch","newValue","clearInterval","console","log","setTimeout","setInterval","reward","tree1","tree2","longerTree"],"sources":["C:\\Users\\10433\\Downloads\\vues\\vue-cli-01-a-new-vue-project\\src\\components\\layout\\skills\\skillCutting.vue"],"sourcesContent":["<template>\r\n    <div class=\"maintain\">\r\n    <div class=\"cuttingAction\">\r\n        <basic-block class=\"header\"\r\n        :block-width=\"'100%'\"\r\n        :side-color=\"'rgb(53,143,18)'\">\r\n            <basic-exp-bar\r\n                :bar-height=\"'2rem'\"\r\n                :bar-width=\"'95%'\"\r\n                :initial-pos=\"'0%'\"\r\n                :color-of-bar=\"'rgb(53,143,18)'\"\r\n                :animation-duration=\"`${Duration}s`\"\r\n                :is-animating=\"isAnimating\"\r\n            ></basic-exp-bar>\r\n            <span v-show=\"isActived.length === 0\">这里将会显示关于你的伐木动作的信息</span>\r\n            <div class=\"detail\" v-show=\"isActived.length !== 0\">\r\n                <div\r\n                v-for=\"(tree, idx) in isActived\"\r\n                :key=\"idx\"\r\n                class=\"outerEdge\">\r\n                    <div class=\"expPart\">\r\n                        <basic-info-block>\r\n                            <img class=\"action\" :src=\"tree.rewardIcon\">\r\n                            <template v-slot:count>\r\n                                {{tree.count}}\r\n                            </template>\r\n                        </basic-info-block>\r\n                        <basic-info-block>\r\n                            <img class=\"action\" src=\"../../../assets/main/mastery_header.svg\">\r\n                            <template v-slot:count>\r\n                                {{tree.masteryGain}}\r\n                            </template>\r\n                        </basic-info-block>\r\n                    </div>\r\n                    <div class=\"masteryPart\">\r\n                        <basic-info-block>\r\n                            <img class=\"action\" src=\"../../../assets/main/xp.svg\">\r\n                            <template v-slot:count>\r\n                                {{tree.exp}}\r\n                            </template>\r\n                        </basic-info-block>\r\n                        <basic-info-block>\r\n                            <img class=\"action\" src=\"../../../assets/main/mastery_pool.svg\">\r\n                            <template v-slot:count>\r\n                                {{tree.masteryPool}}\r\n                            </template>\r\n                        </basic-info-block>\r\n                        <basic-info-block\r\n                            :banner-color=\"'rgb(81,121,214)'\">\r\n                            <img class=\"action\" src=\"../../../assets/main/timer.svg\">\r\n                            <template v-slot:count>\r\n                                {{tree.cutTime}} 秒\r\n                            </template>\r\n                        </basic-info-block>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </basic-block>\r\n    </div>\r\n    <div class=\"trees\">\r\n        <div class=\"helperSturcture\"\r\n            v-for=\"tree in treesData\"\r\n            :key=\"tree.name\"\r\n            :tree-data=\"tree\">\r\n        <cutting-block v-if=\"skillInfo.level >= tree.unlockLevel\">   \r\n                <div class=\"treesContent\" @click=\"switchActiveState(tree)\">\r\n                    <span :style=\"{fontSize:'0.7rem'}\">砍伐</span>\r\n                    <span :style=\"{fontSize:'0.9rem'}\">{{ tree.name }}</span>\r\n                    <span :style=\"{fontSize:'0.7rem'}\">{{ tree.exp }} 技能经验值/{{ tree.cutTime }}秒</span>\r\n                    <span><img :src=\"tree.icon\"></span>\r\n                    <basic-exp-bar\r\n                    :bar-width=\"'90%'\"\r\n                    :bar-height=\"'1.5rem'\"\r\n                    :initial-pos=\"tree.isActive ? '100%' :'0'\"\r\n                    :color-of-bar=\"'rgb(53,143,18)'\"\r\n                    ></basic-exp-bar>\r\n                    <div class=\"mastery_part\">\r\n                        <div class=\"iconPart\">\r\n                            <img src=\"../../../assets/main/mastery_header.svg\">\r\n                            <span>{{ tree.masteryLevel }}</span>\r\n                        </div>\r\n                        <div class=\"mastery_exp_info\">\r\n                            <span class=\"masteryExp\">{{ tree.masteryExp }}/{{getMaxExp(tree.masteryLevel)}}</span>\r\n                            <basic-exp-bar\r\n                                :bar-width=\"'100%'\"\r\n                                :initial-pos=\"`${(tree.masteryExp - getMaxExp(tree.masteryLevel -1 ) / getMaxExp(tree.masteryLevel)- getMaxExp(tree.masteryLevel -1 )) * 100}%`\"\r\n                            ></basic-exp-bar>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </cutting-block>\r\n        <basic-block v-else\r\n        :block-width=\"'100%'\"\r\n        :side-color=\"'rgb(229,103,103)'\"\r\n        :inner-height=\"'98%'\"\r\n        :block-height=\"'264.09px'\">\r\n            <span :style=\"{fontSize:'0.9rem'}\">锁定</span>\r\n            <img class=\"lockedTree\" src=\"../../../assets/woodcutting/woodcutting.svg\">\r\n            <span  class=\"requiredInfo\" :style=\"{fontSize:'0.8rem'}\">等级 {{ tree.unlockLevel }}</span>\r\n        </basic-block>\r\n        </div>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport BasicInfoBlock from '../basicInfoBlock.vue';\r\nimport cuttingBlock from './cuttingBlock.vue'\r\nimport BasicBlock from '../basicBlock.vue';\r\nimport { useWarehouseStore } from '../../../stores/warehouse.js';\r\nimport { useSkillStore } from '../../../stores/expPark.js'\r\nimport { treesData } from '../../../data/skillCutting.js';\r\nimport { levelList } from '../../../data/levelList.js';\r\n\r\nexport default {\r\n  components: { cuttingBlock, BasicInfoBlock, BasicBlock },\r\n    setup() {\r\n        const WarehouseStore = useWarehouseStore();\r\n        const SkillStore = useSkillStore();\r\n        const skillInfo = SkillStore.skills['伐木'];\r\n        const getMasteryExp = SkillStore.getMasteryExp;\r\n        const getMaxExp = SkillStore.getMaxExp;\r\n        const addItem = WarehouseStore.addItem;\r\n        const addExp = SkillStore.addExp;\r\n        const addMasteryPool = SkillStore.addMasteryPoolExp;\r\n        return{\r\n            getMasteryExp,\r\n            getMaxExp,\r\n            addItem,\r\n            addExp,\r\n            addMasteryPool,\r\n            skillInfo\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            isActived:[],\r\n            isAnimating: false,\r\n            timer:null,\r\n            DoubleCutting: false,\r\n            treesData: treesData,\r\n        }\r\n    },\r\n    methods: {\r\n        switchActiveState(tree){\r\n            if(this.isActived.length < (this.DoubleCutting? 2 : 1) && tree.isActive === false){\r\n                tree.isActive = true;\r\n                \r\n                this.isActived.push({count:1,\r\n                    masteryGain:Math.round(this.getMasteryExp(tree.masteryLevel,Object.keys(treesData).length,tree.cutTime)),\r\n                    masteryPool:Math.ceil(this.getMasteryExp(tree.masteryLevel,Object.keys(treesData).length,tree.cutTime)/4),\r\n                     ...tree});\r\n                return\r\n            }\r\n            if(this.isActived.some(item => item.name === tree.name) && tree.isActive === true){\r\n                tree.isActive = false;\r\n                const index = this.isActived.findIndex(item => item.name === tree.name);\r\n                this.isActived.splice(index,1);\r\n                if(this.isActived.length === 1){\r\n                    this.isActived[0] = {count:1,\r\n                        masteryGain:Math.round(this.getMasteryExp(tree.masteryLevel,Object.keys(treesData).length,tree.cutTime)),\r\n                        masteryPool:Math.ceil(this.getMasteryExp(tree.masteryLevel,Object.keys(treesData).length,tree.cutTime)/4),\r\n                         ...Object.values(this.treesData).find(item => item.name === this.isActived[0].name)};\r\n                }\r\n                return\r\n            }\r\n        },\r\n        setTheShorterTreeData(shorterTree, longerTreeCutTime,coefficient){\r\n            shorterTree.cutTime = longerTreeCutTime;\r\n            shorterTree.exp = Math.round(shorterTree.exp * coefficient);\r\n            shorterTree.masteryGain = Math.round(shorterTree.masteryGain * coefficient)\r\n            shorterTree.masteryPool = Math.ceil(shorterTree.masteryPool * coefficient)\r\n            shorterTree.count = Math.round(shorterTree.count * coefficient);\r\n        },\r\n        addMasteryExp(treeName){\r\n            const targetTree = this.treesData[treeName];\r\n            // console.log(` 看看输出了啥${addExpValue}`)\r\n            const addExpValue = this.isActived.find(item => item.name === treeName).masteryGain;\r\n            targetTree.masteryExp += Math.round(addExpValue);\r\n            if(targetTree.masteryExp >= levelList[targetTree.masteryLevel]){\r\n                targetTree.masteryLevel++;\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        isActivedLength(){\r\n            return this.isActived.length;\r\n        },\r\n        Duration(){\r\n            return this.isActived[0]?.cutTime;\r\n        }\r\n    },\r\n    watch:{\r\n        isActivedLength(newValue){\r\n                    if (this.timer) {\r\n                        clearInterval(this.timer);\r\n                        this.isAnimating = false;\r\n                        console.log('clear timer')\r\n                        this.timer = null;\r\n                    }\r\n                    if (newValue === 0) return console.log('clear timer');\r\n                    if (newValue === 1) {\r\n                        console.log('set timer')\r\n                        setTimeout(() => {\r\n                        this.isAnimating = true;\r\n                        }, 0)\r\n\r\n                        this.timer = setInterval(() =>{    \r\n                            this.addItem(this.isActived[0].reward, 1);\r\n                            this.addExp('伐木',this.isActived[0].exp);\r\n                            this.addMasteryExp(this.isActived[0].name);\r\n                            this.addMasteryPool('伐木',this.isActived[0].masteryPool)\r\n                        }, this.isActived[0].cutTime * 1000)\r\n                    }\r\n                    if (newValue === 2) {\r\n                        const [tree1,tree2] = this.isActived;\r\n                        const shorterTree = tree1.cutTime < tree2.cutTime ? tree1 : tree2;\r\n                        const longerTree = tree1.cutTime > tree2.cutTime ? tree1 : tree2;\r\n                        const coefficient = longerTree.cutTime/shorterTree.cutTime;\r\n                        this.setTheShorterTreeData(shorterTree, longerTree.cutTime, coefficient); \r\n                        setTimeout(() => {\r\n                        this.isAnimating = true;\r\n                        }, 0)\r\n                        this.timer = setInterval(() =>{\r\n                            this.addItem(shorterTree.reward, shorterTree.count);\r\n                            this.addExp('伐木',shorterTree.exp);\r\n                            this.addMasteryExp(shorterTree.masteryGain);\r\n                            this.addMasteryPool('伐木',shorterTree.masteryPool)\r\n                            this.addItem(longerTree.reward, longerTree.count);\r\n                            this.addExp('伐木',longerTree.exp);\r\n                            this.addMasteryExp(longerTree.masteryGain);\r\n                            this.addMasteryPool('伐木',longerTree.masteryPool)\r\n                        }, this.isActived[0].cutTime * 1000)\r\n                    }    \r\n            },\r\n    }\r\n    \r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.maintain{\r\n    display: flex;\r\n    flex-direction: column;\r\n    box-sizing: border-box;\r\n}\r\n.cuttingAction{\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 20%;\r\n  gap: 2rem; \r\n  padding: 2rem;\r\n  box-sizing: border-box;\r\n}\r\n.detail{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n    box-sizing: border-box;\r\n    gap: 2rem;\r\n}\r\n.outerEdge{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.expPart{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    box-sizing: border-box;\r\n    padding: 0 1rem;\r\n    gap: 1rem;\r\n}\r\n.masteryPart{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    box-sizing: border-box;\r\n    padding: 0 1rem;\r\n    gap: 1rem;\r\n}\r\n.action{\r\n    height: 2rem;\r\n    width: 2rem;\r\n}\r\n.trees{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n    gap: 2rem;\r\n    width: 100%;\r\n    padding: 2rem;\r\n    box-sizing: border-box;\r\n}\r\n.helperSturcture{\r\n    display: flex;\r\n    width: 23%;\r\n}\r\n.treesContent{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding-top: 2rem;\r\n    padding-bottom: 1rem;\r\n    box-sizing: border-box;\r\n}\r\n.treesContent > span{\r\n    margin: 0.2rem;\r\n    font:bolder;\r\n}\r\n.mastery_part{\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content: center;  \r\n    align-items: center;\r\n    align-content: center;\r\n    justify-items: center;\r\n    text-align: center;\r\n    margin-top:1rem;\r\n}\r\n.iconPart{\r\n   display: flex;\r\n   flex-direction: row;\r\n   gap:0.2rem;\r\n   margin: 0.3rem;\r\n}\r\n.mastery_part > .iconPart > img{\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n    \r\n}\r\n.mastery_part > .mastery_exp_info{\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 60%;\r\n    justify-content: center;  \r\n    align-items: center;\r\n    padding:0px;\r\n}\r\n.masteryExp{\r\n    font-size:0.75rem;\r\n    margin-bottom:0.4rem;\r\n}\r\nimg{\r\n    height:4rem;\r\n    width: 4rem;\r\n}\r\n\r\n.lockedTree{\r\n    margin: 1rem;\r\n}\r\n\r\n.requiredInfo{\r\n    background-color: rgb(229,103,103);\r\n    line-height: 1rem;\r\n    width: 80%;\r\n    text-align: center;\r\n    border-radius: 0.5rem;\r\n}\r\n.header :deep(.inner_block){\r\n    padding-top:2rem;\r\n    padding-bottom: 2rem;\r\n    gap: 2rem; \r\n    box-sizing: border-box;\r\n}\r\n\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}