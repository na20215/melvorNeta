{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { itemList } from '../data/itemList';\nexport const useWarehouseStore = defineStore('warehouse', {\n  state: () => ({\n    capacity: 20,\n    coin: 0,\n    slayerCoin: 0,\n    items: new Map(),\n    currentNotification: null,\n    // 当前显示的通知泡泡\n    notificationTimer: null // 通知计时器\n  }),\n  actions: {\n    isWarehouseFull() {\n      return this.items.size >= this.capacity;\n    },\n    // 显示通知\n    showNotification(itemName, itemQuantity) {\n      if (this.currentNotification && this.currentNotification.itemName === itemName) {\n        // 如果是相同物品，更新数量并刷新计时器\n        this.currentNotification.itemQuantity = itemQuantity;\n\n        // 确保 `currentNotification.element` 存在再更新\n        if (this.currentNotification.element) {\n          this.currentNotification.element.innerHTML = `${itemName}: ${itemQuantity}`;\n        }\n\n        // 重置计时器\n        clearTimeout(this.notificationTimer);\n        this.startNotificationTimer(this.currentNotification.element); // 重新计时\n      } else {\n        // 创建新通知\n        this.createNotification(itemName, itemQuantity);\n      }\n    },\n    // 创建通知泡泡\n    createNotification(itemName, itemQuantity) {\n      // 创建通知元素\n      const notification = document.createElement('div');\n      notification.innerHTML = `${itemName}: ${itemQuantity}`;\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.left = '50%';\n      notification.style.transform = 'translateX(-50%)';\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n      notification.style.color = 'white';\n      notification.style.padding = '10px';\n      notification.style.borderRadius = '5px';\n      document.body.appendChild(notification);\n\n      // 保存当前通知状态\n      this.currentNotification = {\n        itemName,\n        itemQuantity,\n        element: notification // 保存对应的 DOM 元素\n      };\n\n      // 开始计时器，2秒后隐藏\n      this.startNotificationTimer(notification);\n    },\n    // 设置通知计时器，2秒后消失\n    startNotificationTimer(notification) {\n      this.notificationTimer = setTimeout(() => {\n        // 隐藏并删除通知\n        document.body.removeChild(notification);\n        this.currentNotification = null;\n      }, 2000); // 2秒后消失\n    },\n    // 添加物品\n    addItem(itemId, count) {\n      const itemDetails = itemList[itemId];\n      if (!itemDetails) {\n        console.error('Item not found in item list:', itemId);\n        return;\n      }\n      if (this.isWarehouseFull() && !this.items.has(itemId)) {\n        console.log('Warehouse is full. Cannot add new item type.');\n        return;\n      }\n      const currentItem = this.items.get(itemId);\n      if (currentItem) {\n        currentItem.count += count;\n      } else {\n        const newItem = {\n          count: 0,\n          ...itemDetails\n        };\n        newItem.count += count;\n        this.items.set(itemId, newItem);\n      }\n\n      // 调用显示通知\n      this.showNotification(itemDetails.name, this.items.get(itemId).count);\n    },\n    // 消耗物品\n    costItem(itemId, count) {\n      const targetItem = this.items.get(itemId);\n      if (targetItem.count < count) {\n        console.log(`Action failed, the number of ${targetItem.name} is not enough`);\n        return;\n      }\n      targetItem.count -= count;\n      if (targetItem.count === 0) {\n        this.items.delete(itemId);\n      }\n    },\n    // 获取物品数量\n    getItemNumber(itemId) {\n      const thisItem = this.items.get(itemId);\n      return thisItem ? thisItem.count : 0;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","itemList","useWarehouseStore","state","capacity","coin","slayerCoin","items","Map","currentNotification","notificationTimer","actions","isWarehouseFull","size","showNotification","itemName","itemQuantity","element","innerHTML","clearTimeout","startNotificationTimer","createNotification","notification","document","createElement","style","position","bottom","left","transform","backgroundColor","color","padding","borderRadius","body","appendChild","setTimeout","removeChild","addItem","itemId","count","itemDetails","console","error","has","log","currentItem","get","newItem","set","name","costItem","targetItem","delete","getItemNumber","thisItem"],"sources":["C:/Users/10433/Downloads/vues/vue-cli-01-a-new-vue-project/src/stores/warehouse.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport { itemList } from '../data/itemList';\r\n\r\nexport const useWarehouseStore = defineStore('warehouse', {\r\n  state: () => ({\r\n    capacity: 20,\r\n    coin: 0,\r\n    slayerCoin: 0,\r\n    items: new Map(),\r\n    currentNotification: null, // 当前显示的通知泡泡\r\n    notificationTimer: null, // 通知计时器\r\n  }),\r\n\r\n  actions: {\r\n    isWarehouseFull() {\r\n      return this.items.size >= this.capacity;\r\n    },\r\n\r\n    // 显示通知\r\n    showNotification(itemName, itemQuantity) {\r\n      if (this.currentNotification && this.currentNotification.itemName === itemName) {\r\n        // 如果是相同物品，更新数量并刷新计时器\r\n        this.currentNotification.itemQuantity = itemQuantity;\r\n\r\n        // 确保 `currentNotification.element` 存在再更新\r\n        if (this.currentNotification.element) {\r\n          this.currentNotification.element.innerHTML = `${itemName}: ${itemQuantity}`;\r\n        }\r\n\r\n        // 重置计时器\r\n        clearTimeout(this.notificationTimer);\r\n        this.startNotificationTimer(this.currentNotification.element); // 重新计时\r\n      } else {\r\n        // 创建新通知\r\n        this.createNotification(itemName, itemQuantity);\r\n      }\r\n    },\r\n\r\n    // 创建通知泡泡\r\n    createNotification(itemName, itemQuantity) {\r\n      // 创建通知元素\r\n      const notification = document.createElement('div');\r\n      notification.innerHTML = `${itemName}: ${itemQuantity}`;\r\n      notification.style.position = 'fixed';\r\n      notification.style.bottom = '20px';\r\n      notification.style.left = '50%';\r\n      notification.style.transform = 'translateX(-50%)';\r\n      notification.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n      notification.style.color = 'white';\r\n      notification.style.padding = '10px';\r\n      notification.style.borderRadius = '5px';\r\n      document.body.appendChild(notification);\r\n\r\n      // 保存当前通知状态\r\n      this.currentNotification = {\r\n        itemName,\r\n        itemQuantity,\r\n        element: notification, // 保存对应的 DOM 元素\r\n      };\r\n\r\n      // 开始计时器，2秒后隐藏\r\n      this.startNotificationTimer(notification);\r\n    },\r\n\r\n    // 设置通知计时器，2秒后消失\r\n    startNotificationTimer(notification) {\r\n      this.notificationTimer = setTimeout(() => {\r\n        // 隐藏并删除通知\r\n        document.body.removeChild(notification);\r\n        this.currentNotification = null;\r\n      }, 2000); // 2秒后消失\r\n    },\r\n\r\n    // 添加物品\r\n    addItem(itemId, count) {\r\n      const itemDetails = itemList[itemId];\r\n      if (!itemDetails) {\r\n        console.error('Item not found in item list:', itemId);\r\n        return;\r\n      }\r\n\r\n      if (this.isWarehouseFull() && !this.items.has(itemId)) {\r\n        console.log('Warehouse is full. Cannot add new item type.');\r\n        return;\r\n      }\r\n\r\n      const currentItem = this.items.get(itemId);\r\n      if (currentItem) {\r\n        currentItem.count += count;\r\n      } else {\r\n        const newItem = { count: 0, ...itemDetails };\r\n        newItem.count += count;\r\n        this.items.set(itemId, newItem);\r\n      }\r\n\r\n      // 调用显示通知\r\n      this.showNotification(itemDetails.name, this.items.get(itemId).count);\r\n    },\r\n\r\n    // 消耗物品\r\n    costItem(itemId, count) {\r\n      const targetItem = this.items.get(itemId);\r\n      if (targetItem.count < count) {\r\n        console.log(`Action failed, the number of ${targetItem.name} is not enough`);\r\n        return;\r\n      }\r\n      targetItem.count -= count;\r\n      if (targetItem.count === 0) {\r\n        this.items.delete(itemId);\r\n      }\r\n    },\r\n\r\n    // 获取物品数量\r\n    getItemNumber(itemId) {\r\n      const thisItem = this.items.get(itemId);\r\n      return thisItem ? thisItem.count : 0;\r\n    },\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}